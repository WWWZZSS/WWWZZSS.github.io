<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World哈哈哈</title>
      <link href="/post/75142ba7.html"/>
      <url>/post/75142ba7.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React-Hook</title>
      <link href="/post/624c9ba0.html"/>
      <url>/post/624c9ba0.html</url>
      
        <content type="html"><![CDATA[<h4 id="React-Hook"><a href="#React-Hook" class="headerlink" title="React-Hook"></a>React-Hook</h4><p>以下内容参考React官网的教程：<a href="https://react.docschina.org/docs/hooks-intro.html">Hook 简介 – React (docschina.org)</a></p><p>[TOC]</p><h5 id="1-Hook简介"><a href="#1-Hook简介" class="headerlink" title="1.Hook简介"></a>1.Hook简介</h5><p><strong><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</strong></p><p>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。</p><p>使用hook是完全<strong>可选的</strong>，无需重写之前的任何代码，并不用把所有的类组件重写，而是在新编写的代码中尝试使用hook，或完全不使用。hook是<strong>完全向后兼容</strong>的，不会影响原有的React概念，反而提供了一种全新的理解方式。</p><p>我们使用hook的动机在于，它可以解决一些组件维护方面的问题，在之前，组件间的复用逻辑很难，React需要用render props和高阶组件，容易形成嵌套地狱，而<strong>Hook 可以使你在无需修改组件结构的情况下复用状态逻辑</strong>，组件之间的共享变得更加便捷。</p><h5 id="2-State-Hook"><a href="#2-State-Hook" class="headerlink" title="2.State Hook"></a>2.State Hook</h5><p>通过使用State Hook可以在函数组件里面使用state来储存变量并检测其变化进行动态渲染。(之前只能在class组件里面使用)。</p><p>使用方法类似于下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  // 声明一个叫 “count” 的 state 变量。</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ExampleWithManyStates() &#123;</span><br><span class="line">  // 声明多个 state 变量！</span><br><span class="line">  const [age, setAge] = useState(42);</span><br><span class="line">  const [fruit, setFruit] = useState(&#x27;banana&#x27;);</span><br><span class="line">  const [todos, setTodos] = useState([&#123; text: &#x27;Learn Hooks&#x27; &#125;]);</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里useState就是一个Hook，通过这个方法在函数组件里面钩入了内部State，它接收唯一一个参数是初始state值，并有两个返回值。</p><p>const后面的写法是数组解构的语法，分别赋予这两个变量对应的返回值。</p><p><strong>React内置了一些像useState这样的hook，我们可以直接引入并调用，我们也可以创建自己的Hook，来复用不同组件间的状态逻辑。</strong></p><h5 id="3-Effect-Hook"><a href="#3-Effect-Hook" class="headerlink" title="3.Effect Hook"></a>3.Effect Hook</h5><p>useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用[^1]的能力，它跟 class 组件中的componentDidMount、componentDidUpdate 和 componentWillUnmount具有相同的用途，只不过被合并成了一个 API。</p><p>[^1]: 我们之前可能已经在 React 组件中执行过数据获取、订阅或者手动修改过 DOM。我们统一把这些操作称为“副作用”，或者简称为“作用”。</p><p>使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  // 相当于 componentDidMount 和 componentDidUpdate:</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 使用浏览器的 API 更新页面标题</span><br><span class="line">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">//同时使用多个</span><br><span class="line">function FriendStatusWithCounter(props) &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  const [isOnline, setIsOnline] = useState(null);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  function handleStatusChange(status) &#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br></pre></td></tr></table></figure><p>当需要清除某一个副作用时，副作用函数还可以通过返回一个函数来指定如何“清除”副作用。</p><p>使用effect hook的好处在于，可以将相关的逻辑分类集中绑定在一起，而不是像class里那样要拆分开，而且所有代码都挤在一个周期函数里面。</p><p>effect hook可以进行一些优化：我们可以在后面额外添加一个参数，用于判断其是否发生了变化，只有在变化时才会重新渲染执行。比如这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">&#125;, [count]); // 仅在 count 更改时更新</span><br></pre></td></tr></table></figure><p>注意：如果你要使用此优化方式，请确保数组中包含了<strong>所有外部作用域中会随时间变化并且在 effect 中使用的变量</strong>，否则你的代码会引用到先前渲染中的旧变量。</p><p>如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（[]）作为第二个参数。这就告诉 React 你的 effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行。这并不属于特殊情况 —— 它依然遵循依赖数组的工作方式。</p><h5 id="4-Hook使用规则"><a href="#4-Hook使用规则" class="headerlink" title="4.Hook使用规则"></a>4.Hook使用规则</h5><p>Hook 就是 JavaScript 函数，但是使用它们会有两个额外的规则：</p><ul><li>只能在<strong>函数最外层</strong>调用 Hook。不要在循环、条件判断或者子函数中调用。</li><li>只能在 <strong>React 的函数组件</strong>中调用 Hook。不要在其他 JavaScript 函数中调用。（还有一个地方可以调用 Hook —— 就是自定义的 Hook 中，我们稍后会学习到。）</li></ul><p>在使用Hook的时候我们需要遵循这些规则来避免程序可能出现bug，我们只能在函数组件里面使用hook，且如果需要有条件判断等操作，可以将其写在hook里面，而不是在这些操作中调用。</p><p>遵守这些规则的目的在于避免程序出现不必要的错误，React会记住每次hook的调用顺序，只要hook的调用顺序与多次渲染前的保持一致，React就能正确将state和其对应的hook关联起来。</p><h5 id="5-自定义Hook"><a href="#5-自定义Hook" class="headerlink" title="5.自定义Hook"></a>5.自定义Hook</h5><p>有时候我们会想要在组件之间重用一些状态逻辑。目前为止，有两种主流方案来解决这个问题：高阶组件和 render props。自定义 Hook 可以让你在不增加组件的情况下达到同样的目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function useFriendStatus(friendID) &#123;</span><br><span class="line">  const [isOnline, setIsOnline] = useState(null);</span><br><span class="line"></span><br><span class="line">  function handleStatusChange(status) &#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return isOnline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function FriendStatus(props) &#123;</span><br><span class="line">  const isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  if (isOnline === null) &#123;</span><br><span class="line">    return &#x27;Loading...&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  return isOnline ? &#x27;Online&#x27; : &#x27;Offline&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function FriendListItem(props) &#123;</span><br><span class="line">  const isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;li style=&#123;&#123; color: isOnline ? &#x27;green&#x27; : &#x27;black&#x27; &#125;&#125;&gt;</span><br><span class="line">      &#123;props.friend.name&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将组件之间复用的部分提取出来放到自定义的hook里面，重复调用这个自定义的hook来实现复用。</p><p>自定义 Hook 更像是一种约定而不是功能。如果函数的名字以 “use” 开头并调用其他 Hook，我们就说这是一个自定义 Hook。 useSomething 的命名约定可以让我们的 linter 插件在使用 Hook 的代码中找到 bug。</p><p>我们自定义的hook必须以use开头，在两个组件中使用相同的hook不会共享state，每次调用hook都会获取独立的state，他们之间是完全独立的。</p><p>我们可以在hook之间传递信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const friendList = [</span><br><span class="line">  &#123; id: 1, name: &#x27;Phoebe&#x27; &#125;,</span><br><span class="line">  &#123; id: 2, name: &#x27;Rachel&#x27; &#125;,</span><br><span class="line">  &#123; id: 3, name: &#x27;Ross&#x27; &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function ChatRecipientPicker() &#123;</span><br><span class="line">  const [recipientID, setRecipientID] = useState(1);</span><br><span class="line">  const isRecipientOnline = useFriendStatus(recipientID);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Circle color=&#123;isRecipientOnline ? &#x27;green&#x27; : &#x27;red&#x27;&#125; /&gt;</span><br><span class="line">      &lt;select</span><br><span class="line">        value=&#123;recipientID&#125;</span><br><span class="line">        onChange=&#123;e =&gt; setRecipientID(Number(e.target.value))&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;friendList.map(friend =&gt; (</span><br><span class="line">          &lt;option key=&#123;friend.id&#125; value=&#123;friend.id&#125;&gt;</span><br><span class="line">            &#123;friend.name&#125;</span><br><span class="line">          &lt;/option&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过传递参数的方式，在点击后state的值发生变化，页面重新渲染，hook里的方法也会重新执行，通过这个例子我们还能学到，不需要动态检测的变量我们可以写在外面而不是state里，类似于全局变量的方式进行调用。</p><h5 id="6-一些补充"><a href="#6-一些补充" class="headerlink" title="6.一些补充"></a>6.一些补充</h5><p>useState的函数式更新<a href="https://react.docschina.org/docs/hooks-reference.html#usestate"><code>useState</code></a></p><p>当数据操作变得复杂时，可以选择使用这种方式处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Counter(&#123;initialCount&#125;) &#123;</span><br><span class="line">  const [count, setCount] = useState(initialCount);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(initialCount)&#125;&gt;Reset&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount - 1)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount + 1)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setState(prevState =&gt; &#123;</span><br><span class="line">  // 也可以使用 Object.assign</span><br><span class="line">  return &#123;...prevState, ...updatedValues&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>链接里面还有一些其他的api可以参考使用。</p><h5 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h5><p>React Hook为React增添了一些新的可用的特性，我们可以在代码中尝试使用它来优化相关逻辑，之前在暑假项目实训的时候，用到了一种页面跳转的相关组件，其中的函数就只能写在函数组件里面，hook在这里就可以丰富函数组件里的相关功能。</p>]]></content>
      
      
      <categories>
          
          <category> -前端学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 -React -Hook </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

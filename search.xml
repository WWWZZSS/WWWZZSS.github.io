<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>promise笔记</title>
      <link href="/post/41f58630.html"/>
      <url>/post/41f58630.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="/post/e803913a.html"/>
      <url>/post/e803913a.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css笔记</title>
      <link href="/post/ac1879a7.html"/>
      <url>/post/ac1879a7.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html笔记</title>
      <link href="/post/5bada17d.html"/>
      <url>/post/5bada17d.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown笔记以及Typaro相关快捷键</title>
      <link href="/post/c958d3ac.html"/>
      <url>/post/c958d3ac.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>axios笔记</title>
      <link href="/post/eb68fe8b.html"/>
      <url>/post/eb68fe8b.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React笔记</title>
      <link href="/post/a1605017.html"/>
      <url>/post/a1605017.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React-Hook</title>
      <link href="/post/624c9ba0.html"/>
      <url>/post/624c9ba0.html</url>
      
        <content type="html"><![CDATA[<p>跟着React官网的教程简单学习了一些相关用法：<a href="https://react.docschina.org/docs/hooks-intro.html">Hook 简介 – React (docschina.org)</a></p><h5 id="1-Hook简介"><a href="#1-Hook简介" class="headerlink" title="1.Hook简介"></a>1.Hook简介</h5><p><strong><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</strong></p><p>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。</p><p>使用hook是完全<strong>可选的</strong>，无需重写之前的任何代码，并不用把所有的类组件重写，而是在新编写的代码中尝试使用hook，或完全不使用。hook是<strong>完全向后兼容</strong>的，不会影响原有的React概念，反而提供了一种全新的理解方式。</p><p>我们使用hook的动机在于，它可以解决一些组件维护方面的问题，在之前，组件间的复用逻辑很难，React需要用render props和高阶组件，容易形成嵌套地狱，而<strong>Hook 可以使你在无需修改组件结构的情况下复用状态逻辑</strong>，组件之间的共享变得更加便捷。</p><h5 id="2-State-Hook"><a href="#2-State-Hook" class="headerlink" title="2.State Hook"></a>2.State Hook</h5><p>通过使用State Hook可以在函数组件里面使用state来储存变量并检测其变化进行动态渲染。(之前只能在class组件里面使用)。</p><p>使用方法类似于下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  // 声明一个叫 “count” 的 state 变量。</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ExampleWithManyStates() &#123;</span><br><span class="line">  // 声明多个 state 变量！</span><br><span class="line">  const [age, setAge] = useState(42);</span><br><span class="line">  const [fruit, setFruit] = useState(&#x27;banana&#x27;);</span><br><span class="line">  const [todos, setTodos] = useState([&#123; text: &#x27;Learn Hooks&#x27; &#125;]);</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里useState就是一个Hook，通过这个方法在函数组件里面钩入了内部State，它接收唯一一个参数是初始state值，并有两个返回值。</p><p>const后面的写法是数组解构的语法，分别赋予这两个变量对应的返回值。</p><p><strong>React内置了一些像useState这样的hook，我们可以直接引入并调用，我们也可以创建自己的Hook，来复用不同组件间的状态逻辑。</strong></p><h5 id="3-Effect-Hook"><a href="#3-Effect-Hook" class="headerlink" title="3.Effect Hook"></a>3.Effect Hook</h5><p>useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用[^1]的能力，它跟 class 组件中的componentDidMount、componentDidUpdate 和 componentWillUnmount具有相同的用途，只不过被合并成了一个 API。</p><p>[^1]: 我们之前可能已经在 React 组件中执行过数据获取、订阅或者手动修改过 DOM。我们统一把这些操作称为“副作用”，或者简称为“作用”。</p><p>使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  // 相当于 componentDidMount 和 componentDidUpdate:</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 使用浏览器的 API 更新页面标题</span><br><span class="line">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">//同时使用多个</span><br><span class="line">function FriendStatusWithCounter(props) &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  const [isOnline, setIsOnline] = useState(null);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  function handleStatusChange(status) &#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br></pre></td></tr></table></figure><p>当需要清除某一个副作用时，副作用函数还可以通过返回一个函数来指定如何“清除”副作用。</p><p>使用effect hook的好处在于，可以将相关的逻辑分类集中绑定在一起，而不是像class里那样要拆分开，而且所有代码都挤在一个周期函数里面。</p><p>effect hook可以进行一些优化：我们可以在后面额外添加一个参数，用于判断其是否发生了变化，只有在变化时才会重新渲染执行。比如这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">&#125;, [count]); // 仅在 count 更改时更新</span><br></pre></td></tr></table></figure><p>注意：如果你要使用此优化方式，请确保数组中包含了<strong>所有外部作用域中会随时间变化并且在 effect 中使用的变量</strong>，否则你的代码会引用到先前渲染中的旧变量。</p><p>如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（[]）作为第二个参数。这就告诉 React 你的 effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行。这并不属于特殊情况 —— 它依然遵循依赖数组的工作方式。</p><h5 id="4-Hook使用规则"><a href="#4-Hook使用规则" class="headerlink" title="4.Hook使用规则"></a>4.Hook使用规则</h5><p>Hook 就是 JavaScript 函数，但是使用它们会有两个额外的规则：</p><ul><li>只能在<strong>函数最外层</strong>调用 Hook。不要在循环、条件判断或者子函数中调用。</li><li>只能在 <strong>React 的函数组件</strong>中调用 Hook。不要在其他 JavaScript 函数中调用。（还有一个地方可以调用 Hook —— 就是自定义的 Hook 中，我们稍后会学习到。）</li></ul><p>在使用Hook的时候我们需要遵循这些规则来避免程序可能出现bug，我们只能在函数组件里面使用hook，且如果需要有条件判断等操作，可以将其写在hook里面，而不是在这些操作中调用。</p><p>遵守这些规则的目的在于避免程序出现不必要的错误，React会记住每次hook的调用顺序，只要hook的调用顺序与多次渲染前的保持一致，React就能正确将state和其对应的hook关联起来。</p><h5 id="5-自定义Hook"><a href="#5-自定义Hook" class="headerlink" title="5.自定义Hook"></a>5.自定义Hook</h5><p>有时候我们会想要在组件之间重用一些状态逻辑。目前为止，有两种主流方案来解决这个问题：高阶组件和 render props。自定义 Hook 可以让你在不增加组件的情况下达到同样的目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function useFriendStatus(friendID) &#123;</span><br><span class="line">  const [isOnline, setIsOnline] = useState(null);</span><br><span class="line"></span><br><span class="line">  function handleStatusChange(status) &#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return isOnline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function FriendStatus(props) &#123;</span><br><span class="line">  const isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  if (isOnline === null) &#123;</span><br><span class="line">    return &#x27;Loading...&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  return isOnline ? &#x27;Online&#x27; : &#x27;Offline&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function FriendListItem(props) &#123;</span><br><span class="line">  const isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;li style=&#123;&#123; color: isOnline ? &#x27;green&#x27; : &#x27;black&#x27; &#125;&#125;&gt;</span><br><span class="line">      &#123;props.friend.name&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将组件之间复用的部分提取出来放到自定义的hook里面，重复调用这个自定义的hook来实现复用。</p><p>自定义 Hook 更像是一种约定而不是功能。如果函数的名字以 “use” 开头并调用其他 Hook，我们就说这是一个自定义 Hook。 useSomething 的命名约定可以让我们的 linter 插件在使用 Hook 的代码中找到 bug。</p><p>我们自定义的hook必须以use开头，在两个组件中使用相同的hook不会共享state，每次调用hook都会获取独立的state，他们之间是完全独立的。</p><p>我们可以在hook之间传递信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const friendList = [</span><br><span class="line">  &#123; id: 1, name: &#x27;Phoebe&#x27; &#125;,</span><br><span class="line">  &#123; id: 2, name: &#x27;Rachel&#x27; &#125;,</span><br><span class="line">  &#123; id: 3, name: &#x27;Ross&#x27; &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function ChatRecipientPicker() &#123;</span><br><span class="line">  const [recipientID, setRecipientID] = useState(1);</span><br><span class="line">  const isRecipientOnline = useFriendStatus(recipientID);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Circle color=&#123;isRecipientOnline ? &#x27;green&#x27; : &#x27;red&#x27;&#125; /&gt;</span><br><span class="line">      &lt;select</span><br><span class="line">        value=&#123;recipientID&#125;</span><br><span class="line">        onChange=&#123;e =&gt; setRecipientID(Number(e.target.value))&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;friendList.map(friend =&gt; (</span><br><span class="line">          &lt;option key=&#123;friend.id&#125; value=&#123;friend.id&#125;&gt;</span><br><span class="line">            &#123;friend.name&#125;</span><br><span class="line">          &lt;/option&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过传递参数的方式，在点击后state的值发生变化，页面重新渲染，hook里的方法也会重新执行，通过这个例子我们还能学到，不需要动态检测的变量我们可以写在外面而不是state里，类似于全局变量的方式进行调用。</p><h5 id="6-一些补充"><a href="#6-一些补充" class="headerlink" title="6.一些补充"></a>6.一些补充</h5><p>useState的函数式更新<a href="https://react.docschina.org/docs/hooks-reference.html#usestate"><code>useState</code></a></p><p>当数据操作变得复杂时，可以选择使用这种方式处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Counter(&#123;initialCount&#125;) &#123;</span><br><span class="line">  const [count, setCount] = useState(initialCount);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(initialCount)&#125;&gt;Reset&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount - 1)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount + 1)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setState(prevState =&gt; &#123;</span><br><span class="line">  // 也可以使用 Object.assign</span><br><span class="line">  return &#123;...prevState, ...updatedValues&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>链接里面还有一些其他的api可以参考使用。</p><h5 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h5><p>React Hook为React增添了一些新的可用的特性，我们可以在代码中尝试使用它来优化相关逻辑，之前在暑假项目实训的时候，用到了一种页面跳转的相关组件，其中的函数就只能写在函数组件里面，hook在这里就可以丰富函数组件里的相关功能。</p>]]></content>
      
      
      <categories>
          
          <category> -前端学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 -React -Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React官网的井字棋小游戏</title>
      <link href="/post/ccacffe7.html"/>
      <url>/post/ccacffe7.html</url>
      
        <content type="html"><![CDATA[<p>这个是我在官网再次复习这个小游戏时梳理的一些思路，其中也包含了我在尝试时出的一些bug</p><h5 id="1-整体分析项目"><a href="#1-整体分析项目" class="headerlink" title="1.整体分析项目"></a>1.整体分析项目</h5><p><strong>先对整个项目进行分析，可以分割为哪些组件，组件之间应该如何联系</strong></p><p>这个小游戏中一共分为三个组件</p><p>Square组件：用来渲染每一个小方格</p><p>Board组件：控制九个方格这一面板</p><p>Game组件：控制更宏观的东西</p><p>可以通过初步的分析设计出这三个组件，以及确定好组件之间的关系</p><p>可以先由此写出一个没有交互，没有变化的静态页面</p><h5 id="2-为变量添加state并绑定点击事件"><a href="#2-为变量添加state并绑定点击事件" class="headerlink" title="2.为变量添加state并绑定点击事件"></a>2.为变量添加state并绑定点击事件</h5><p>接下来为这个项目添加”活力”</p><p>1.Square组件需要实时打印’X’、’Y’或空白，是变化量，因此要设置为state可以修改</p><p>2.但是在这个游戏中，需要判断输赢，单独的九个Square无法关联，因此需要<strong>状态提升</strong></p><p>将这个value设置值为Board的State，再通过参数Props传入Square，就能实现在Board层面，宏观控制九个值的关系，判断输赢</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">      <span class="attr">squares</span>: <span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在Board组件中声明</p><p>3.根据用户的点击，要在棋盘上落子，因此要响应onClick事件</p><p>但是，onClick是直接与Square的botton相关联，而state在Board中</p><p>直接的onClick处理函数无法越级更改父级中的State</p><p>因此，onClick事件的处理一定要在Board组件中</p><p>所以，可以在Square中额外添加一个onClick属性，由父组件的props传入，这样在点击时就会调用Board里的处理函数</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\1.png" alt="1"></p><p>value的值也与onClick一样由Board传入</p><p>相当于这个点击事件的状态也随之提升了</p><p>Square组件也被称为受控组件，完全由Board进行控制</p><p>4.下面需要完善Board里的点击事件处理函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleClick</span>(<span class="params">i</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> squares =<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">squares</span>.<span class="title function_">slice</span>();</span><br><span class="line">  squares[i]=<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">squares</span>: squares,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意的是，在这里，我们用新的一份数据来替换旧的数据，这样比直接修改数据有一些好处</strong></p><p>如果直接进行修改的话，很难追踪到数据的改变，而用整体替换，相当于有很多的历史版本，对于数据维护，或者是撤销等复杂功能提供了更好的实现方法。</p><p>写完之后点击会在相应的方格出现’X’</p><p>但是我在这里犯了两个小错误：</p><p>①</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\2.png" alt="2"></p><p>在这里，应该传递的是<strong>数字这个索引</strong>，而不是直接传递<strong>值</strong></p><p>如果传递数字的话，它就像一个Id，有很高的复用性，但是值得复用性就很低</p><p>因此要把8也改为this.renderSquare(8)      (前几个我已经改回来了)</p><p>②</p><p>然后运行后点击还是没有反应，对比代码后发现，传入的onClick必须加括号</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\3.png" alt="3"></p><p>可能因为onClick的值是一段js代码，所以被理解为了函数</p><p>修改完之后就可以正常运行了</p><p>5.由于Square只有一个render方法，可以改写成函数组件，更方便一些</p><p>像这样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Square</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.value&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是之后又又又报错了，，找了半天才发现改为函数组件后，要去掉后面的括号</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\4.png" alt="4"></p><p>这样才是对的</p><h5 id="3-轮流落子"><a href="#3-轮流落子" class="headerlink" title="3.轮流落子"></a>3.轮流落子</h5><p>在这里需要在state中额外添加一个变量来储存，下一位应该是哪个玩家&#x2F;改玩家能不能落子</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\5.png" alt="5"></p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\6.png" alt="6"></p><p>这个地方要写圆括号，写大括号会报错</p><h5 id="4-判断输赢"><a href="#4-判断输赢" class="headerlink" title="4.判断输赢"></a>4.判断输赢</h5><p>要写一个能判断输赢的全局函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculateWinner</span>(<span class="params">squares</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> lines=[</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lines.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> [a,b,c]=lines[i];</span><br><span class="line">    <span class="keyword">if</span>(squares[a]&amp;&amp;squares[a]===squares[b]&amp;&amp;squares[a]===squares[c])&#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要防止用户多次点击，或者在决出胜者之后，不能再落子</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\7.png" alt="7"></p><p>一个类组件一般包含几部分</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\8.png" alt="8"></p><p>第一部分一般写构造函数、事件处理函数等等</p><p>第二部分一般写一些逻辑代码</p><p>第三步部分return内的，代表想在页面上展示的</p><h5 id="5-时间旅行"><a href="#5-时间旅行" class="headerlink" title="5.时间旅行"></a>5.时间旅行</h5><p>实现时间回溯的功能，与之前的squares.slice()处理有很大的关系</p><p>用这种切片的处理，让数据追踪变得容易，每一次都是静态不变的历史数据版本，只要再声明一个history将其储存下来即可</p><p>我们想用最外层的game组件实现这一部分，因此history应声明在history的state中，同时要将board组件里的squares状态再次梯提升，这样history就能直接与其操作了</p><p>注意大括号</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\9.png" alt="9"></p><p>用Array声明相当于执行了js代码，所以要套在大括号里</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\10.png" alt="10"></p><p>修改后的点击事件处理函数</p><h5 id="6-展示历史步骤"><a href="#6-展示历史步骤" class="headerlink" title="6.展示历史步骤"></a>6.展示历史步骤</h5><p>在处理未知个数据时，可以用map方法，把它们一个个都渲染出来</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\11.png" alt="11"></p><p><strong>写成move元素的形式，然后再在最下面调用即可</strong></p><p>比直接写在下面要好得多</p><p><strong>在构建动态列表时，要指定一个合适的key</strong></p><p>系统会根据key查找上次与其相同的元素，进行比较，然后重新渲染</p><p>最后引入一个state参数，stepNumber，来记录版本号，这样处理会更方便一些</p><p>两个核心函数：</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\12.png" alt="12"></p><p>所有代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Square</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;props.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Board</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="title function_">renderSquare</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">Square</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">value</span>=<span class="string">&#123;this.props.squares[i]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.props.onClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span> )</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Game</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">      <span class="variable language_">super</span>(props);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">        <span class="attr">history</span>: [</span><br><span class="line">          &#123;<span class="attr">squares</span>: <span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>)&#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">xIsNext</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">stepNumber</span>: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params">i</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> history=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">stepNumber</span>+<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">const</span> current=history[history.<span class="property">length</span>-<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> squares=current.<span class="property">squares</span>.<span class="title function_">slice</span>();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(squares[i]||<span class="title function_">calculateWinner</span>(squares))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      squares[i]=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>?<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">history</span>: history.<span class="title function_">concat</span>([&#123;</span><br><span class="line">          <span class="attr">squares</span>: squares,</span><br><span class="line">        &#125;]),</span><br><span class="line">        <span class="attr">xIsNext</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>,</span><br><span class="line">        <span class="attr">stepNumber</span>: history.<span class="property">length</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">jumpTo</span>(<span class="params">step</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">stepNumber</span>: step,</span><br><span class="line">        <span class="attr">xIsNext</span>: (step%<span class="number">2</span>)===<span class="number">0</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> history=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>;</span><br><span class="line">      <span class="keyword">const</span> current=history[<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">stepNumber</span>];</span><br><span class="line">      <span class="keyword">const</span> winner=<span class="title function_">calculateWinner</span>(current.<span class="property">squares</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> moves=history.<span class="title function_">map</span>(<span class="function">(<span class="params">step,move</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> desc=move?<span class="string">&#x27;Go to move #&#x27;</span>+<span class="attr">move</span>:<span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">botton</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.jumpTo(move)&#125;&gt;&#123;desc&#125;<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> status;</span><br><span class="line">      <span class="keyword">if</span>(winner)&#123;</span><br><span class="line">        status=<span class="string">&#x27;Winner: &#x27;</span>+ winner;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        status=<span class="string">&#x27;Next Player: &#x27;</span>+(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>?<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Board</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;(i)</span>=&gt;</span>this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; status &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ========================================</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">  root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Game</span> /&gt;</span></span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">calculateWinner</span>(<span class="params">squares</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> lines=[</span><br><span class="line">      [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">      [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">      [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">      [<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>],</span><br><span class="line">      [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>],</span><br><span class="line">      [<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>],</span><br><span class="line">      [<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>],</span><br><span class="line">      [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lines.<span class="property">length</span>;i++)&#123;</span><br><span class="line">      <span class="keyword">const</span> [a,b,c]=lines[i];</span><br><span class="line">      <span class="keyword">if</span>(squares[a]&amp;&amp;squares[a]===squares[b]&amp;&amp;squares[a]===squares[c])&#123;</span><br><span class="line">        <span class="keyword">return</span> squares[a];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="E:\myblog\source\image\React官网的井字棋小游戏\13.png" alt="13"></p><h5 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h5><p>在学习技术的时候，永远是要勤写，光停留在理论层面是学不会的，在自己敲代码的时候，能留意到更多的细节，也会引发更多的思考，同时也会加深对这个项目的理解，也能积累下来很多代码的经验</p><p>在写代码的过程中要仔细，一个小小的错误可能会为找bug带来巨大的苦恼，所以尽量不犯小错误，能减少bug的出现，保护头发</p><p>在IT行业，一方面技术更新迭代很快，另一方面确实感受到知识面很广，要学很多的东西，了解很多的东西，还是要多学多看多了解，慢慢积累</p><p>在前端项目中，尤其是大型项目，一般要使用React+Axios，</p><p>简单的项目一般使用jQuary+$.ajax就可以了</p><p>当然前端也有使用很广泛的Vue框架，这个等之后有空再学</p><p>复习到这里，基本上也算复习完了，在暑期实训的同时，要把axios学了，再学一学与后端对接的知识</p><p>加油！！</p>]]></content>
      
      
      <categories>
          
          <category> -前端学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 -React -小游戏 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
